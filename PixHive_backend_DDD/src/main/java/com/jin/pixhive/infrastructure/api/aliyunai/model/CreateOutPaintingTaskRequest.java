package com.jin.pixhive.infrastructure.api.aliyunai.model;

import cn.hutool.core.annotation.Alias;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Data;

import java.io.Serializable;

/**
 * Request for the expanded image task
 */
@Data
public class CreateOutPaintingTaskRequest implements Serializable {

    /**
     * model, e.g., "image-out-painting"
     */
    private String model = "image-out-painting";

    /**
     * input image
     */
    private Input input;

    /**
     * Image processing parameters
     */
    private Parameters parameters;

    @Data
    public static class Input {
        /**
         * [required]
         */
        @Alias("image_url")
        private String imageUrl;
    }

    @Data
    public static class Parameters implements Serializable {
        /**
         * [optional] Angle of counterclockwise rotation
         * [0, 359] default: 0
         */
        private Integer angle;

        /**
         * [optional] Output ratio(w/h)
         * select from: ["", "1:1", "3:4", "4:3", "9:16", "16:9"]
         * default: "" free
         */
        @Alias("output_ratio")
        private String outputRatio;

        /**
         * [optional] Centered and proportionally expanded in the horizontal direction
         * [1.0, 3.0]
         * default: 1.0
         */
        /**
         * !! SpringMVC cannot map parameters whose second letter is capitalized.
         * need to add @JsonProperty annotation !!
         */
        @Alias("x_scale")
        @JsonProperty("xScale")
        private Float xScale;

        /**
         * [optional] Centered and proportionally expanded in the vertical direction
         * [1.0, 3.0]
         * default: 1.0
         */
        @Alias("y_scale")
        @JsonProperty("yScale")
        private Float yScale;

        /**
         * [optional] default: 0
         */
        @Alias("top_offset")
        private Integer topOffset;

        /**
         * [optional] default: 0
         */
        @Alias("bottom_offset")
        private Integer bottomOffset;

        /**
         * [optional] default: 0
         */
        @Alias("left_offset")
        private Integer leftOffset;

        /**
         * [optional] default: 0
         */
        @Alias("right_offset")
        private Integer rightOffset;

        /**
         * [optional] Enable the best image quality mode
         * default: false
         * if true, time consumption will multiply
         */
        @Alias("best_quality")
        private Boolean bestQuality;

        /**
         * [optional] Limit image size
         * default: true
         * - Unilateral length <= 10,000: The size is limited to 5MB or less
         * - Unilateral length > 10000: The size is limited to 10MB or less
         */
        @Alias("limit_image_size")
        private Boolean limitImageSize;

        /**
         * [optional] add watermark: "Generated by AI"
         * default: true
         */
        @Alias("add_watermark")
        private Boolean addWatermark = false;
    }
}

